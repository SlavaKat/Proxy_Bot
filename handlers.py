import logging
import os
from aiogram import types, F, Bot, Router, Dispatcher
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from database import (
    load_proxy_files, get_next_proxy, mark_proxy_as_used, save_proxy_history, 
    update_ticket_status, init_db, migrate_db, create_support_ticket, 
    get_proxy_history, get_user_settings, get_user_tickets, update_ticket_reply,
    get_ticket_info, get_user_proxy_downloads, log_proxy_download, get_proxy_downloads
)
from utils import init_proxy_files

# Create a router
router = Router()
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from config import (
    ADMIN_CHAT_ID, DB_FILE, MEDIA_FOLDER as SUPPORT_MEDIA_FOLDER,
    PROXY_FOLDER, MAX_TICKETS_PER_USER, ADMIN_IDS
)
import sqlite3
from datetime import datetime, timedelta
from keyboards import *
from states import SupportStates
from utils import save_media, format_date

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    init_db()
    migrate_db()
    init_proxy_files()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–æ–∫—Å–∏.\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –ø—Ä–æ–∫—Å–∏\". –Ø –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.\n\n"
        "üëâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @VyacheslavKatirkin \n\n"
        "üëá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "üçî –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
async def get_proxy_handler(message: types.Message):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏-—Ñ–∞–π–ª–æ–≤
        proxy_files = load_proxy_files()
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∑–∞–Ω–æ–≤–æ
        if not proxy_files:
            init_proxy_files()
            proxy_files = load_proxy_files()
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
            if not proxy_files:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        buttons = []
        for file in proxy_files:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            file_path = os.path.join("proxies", file['name'])
            if not os.path.exists(file_path):
                logging.warning(f"–§–∞–π–ª –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
                
            buttons.append(
                InlineKeyboardButton(
                    text=file['display'],
                    callback_data=f"getproxy_{file['name']}"
                )
            )
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not buttons:
            await message.answer("‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            buttons[i:i+2] for i in range(0, len(buttons), 2)
        ])
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            await message.delete()
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@router.callback_query(F.data.startswith("getproxy_"))
async def get_proxy_callback(callback: types.CallbackQuery):
    file_name = callback.data.split("_", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
    proxy = get_next_proxy(file_name)
    
    if not proxy:
        await callback.answer("‚ö†Ô∏è –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–∫—Å–∏!", show_alert=True)
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    mark_proxy_as_used(proxy, file_name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    display_name = next((f['display'] for f in load_proxy_files() if f['name'] == file_name), file_name)
    save_proxy_history(callback.from_user.id, proxy, display_name)
    
    await callback.message.edit_text(
        f"üîë –í–∞—à –ø—Ä–æ–∫—Å–∏ ({display_name}):\n<code>{proxy}</code>\n\n"
        "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!\n"
        "üîÑ –î–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∫—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await callback.bot.send_message(
        ADMIN_CHAT_ID,
        f"üÜï –í—ã–¥–∞–Ω –ø—Ä–æ–∫—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.mention_html()}\n"
        f"ID: {callback.from_user.id}\n"
        f"–¢–∏–ø: {display_name}\n"
        f"–ü—Ä–æ–∫—Å–∏: {proxy}"
    )

@router.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
async def download_file_handler(message: types.Message):
    proxy_files = load_proxy_files()
    if not proxy_files:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏-—Ñ–∞–π–ª–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = []
    for file in proxy_files:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞: –æ–¥–Ω–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –¥—Ä—É–≥–∞—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        buttons_row = [
            InlineKeyboardButton(
                text=f"üìÑ {file['display']}",
                callback_data=f"download_{file['name']}"
            ),
            InlineKeyboardButton(
                text="üîó –°—Å—ã–ª–∫–∞",
                callback_data=f"link_{file['name']}"
            )
        ]
        buttons.append(buttons_row)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(
        "üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("download_"))
async def download_file_callback(callback: types.CallbackQuery):
    file_name = callback.data.split("_", 1)[1]
    file_path = os.path.join(PROXY_FOLDER, file_name)
    
    if not os.path.exists(file_path):
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        log_proxy_download(callback.from_user.id, file_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.bot.send_document(
            callback.from_user.id,
            FSInputFile(file_path),
            caption=f"üì• <b>–§–∞–π–ª:</b> {file_name}\n\n<i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</i>"
        )
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        if str(callback.from_user.id) != str(ADMIN_CHAT_ID):
            admin_message = (
                f"üì• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞—á–∞–ª –ø—Ä–æ–∫—Å–∏-—Ñ–∞–π–ª\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.mention_html()}\n"
                f"üÜî ID: {callback.from_user.id}\n"
                f"üìÇ –§–∞–π–ª: {file_name}"
            )
            await callback.bot.send_message(
                ADMIN_CHAT_ID,
                admin_message,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª!", show_alert=True)

@router.callback_query(F.data.startswith("link_"))
async def get_file_link_callback(callback: types.CallbackQuery):
    file_name = callback.data.split("_", 1)[1]
    file_path = os.path.join(PROXY_FOLDER, file_name)
    
    if not os.path.exists(file_path):
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –∫–∞–∫ "—Å—Å—ã–ª–∫–æ–π" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞)
    await callback.message.answer(
        f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª:</b> <code>{file_name}</code>\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é."
    )
    await callback.answer("‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!")

@router.message(Command("downloads"))
async def cmd_downloads(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    if str(message.from_user.id) != str(ADMIN_CHAT_ID):
        return
        
    downloads = get_proxy_downloads(limit=20)
    if not downloads:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è—Ö")
        return
    
    response = "üì• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏-—Ñ–∞–π–ª–æ–≤:</b>\n\n"
    for dl in downloads:
        user_info = f"{dl.get('first_name', '')} {dl.get('last_name', '')} (@{dl.get('username', '')})".strip()
        if not user_info.strip():
            user_info = f"ID: {dl['user_id']}"
            
        response += (
            f"üë§ <b>{user_info}</b>\n"
            f"üìÇ –§–∞–π–ª: {dl['file_name']}\n"
            f"üïí {dl['download_time']}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    await message.answer(response, parse_mode='HTML')

@router.message(Command("mydownloads"))
async def cmd_my_downloads(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–æ–∏—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"""
    downloads = get_user_proxy_downloads(message.from_user.id)
    if not downloads:
        await message.answer("üì≠ –í—ã –µ—â–µ –Ω–µ —Å–∫–∞—á–∏–≤–∞–ª–∏ –ø—Ä–æ–∫—Å–∏-—Ñ–∞–π–ª—ã")
        return
    
    response = "üì• <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:</b>\n\n"
    for dl in downloads:
        response += (
            f"üìÇ –§–∞–π–ª: {dl['file_name']}\n"
            f"üïí {dl['download_time']}\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    
    await message.answer(response, parse_mode='HTML')

@router.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history_handler(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∫—Å–∏ –∏ –∑–∞–≥—Ä—É–∑–æ–∫
    proxy_history = get_proxy_history(message.from_user.id)
    download_history = get_user_proxy_downloads(message.from_user.id, limit=10)
    
    if not proxy_history and not download_history:
        await message.answer("üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏", 
                           reply_markup=get_main_menu())
        return
    
    response = "üìú <b>–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:</b>\n\n"
    
    # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∫—Å–∏
    if proxy_history:
        response += "<b>–í—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:</b>\n"
        for item in proxy_history:
            proxy_type = item.get('proxy_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
            proxy = item.get('proxy', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
            date = item.get('issue_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            response += f"‚Ä¢ <b>{proxy_type}</b>\n<code>{proxy}</code>\n‚îî {date}\n\n"
    
    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
    if download_history:
        response += "\n<b>–°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n"
        for dl in download_history:
            file_name = dl.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')
            dl_time = dl.get('download_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è')
            response += f"‚Ä¢ {file_name}\n‚îî {dl_time}\n"
    
    await message.answer(response, parse_mode='HTML')

@router.message(F.text == "üìé –ú–æ–∏ —Ñ–∞–π–ª—ã")
async def my_files_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_dir = os.path.join(SUPPORT_MEDIA_FOLDER, str(user_id))
    
    if not os.path.exists(user_dir) or not os.listdir(user_dir):
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return
    
    files = [f for f in os.listdir(user_dir) if os.path.isfile(os.path.join(user_dir, f))]
    
    response = "üìÅ <b>–í–∞—à–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n\n"
    for idx, file in enumerate(files, 1):
        file_path = os.path.join(user_dir, file)
        file_size = os.path.getsize(file_path) / 1024  # —Ä–∞–∑–º–µ—Ä –≤ –ö–ë
        response += f"{idx}. {file} ({file_size:.1f} –ö–ë)\n"
    
    response += "\nüìå –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
    
    await message.answer(response, parse_mode='HTML')

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return

    try:
        conn = sqlite3.connect(DB_FILE)
        c = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        c.execute("""
            SELECT
                (SELECT COUNT(*) FROM users) as total_users,
                (SELECT COUNT(*) FROM proxy_history) as total_proxies_issued,
                (SELECT COUNT(*) FROM proxy_downloads) as total_downloads,
                (SELECT COUNT(DISTINCT user_id) FROM proxy_downloads) as active_users
        """)
        stats = c.fetchone()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        c.execute("""
            SELECT
                date(issue_date) as day,
                COUNT(*) as count
            FROM proxy_history
            WHERE date(issue_date) >= ?
            GROUP BY date(issue_date)
            ORDER BY day DESC
        """, (week_ago,))
        daily_stats = c.fetchall()

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
        c.execute("""
            SELECT
                proxy_type,
                COUNT(*) as count
            FROM proxy_history
            GROUP BY proxy_type
            ORDER BY count DESC
            LIMIT 5
        """)
        top_proxies = c.fetchall()

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        c.execute("""
            SELECT
                u.user_id,
                u.first_name,
                u.username,
                COUNT(h.id) as proxy_count
            FROM users u
            LEFT JOIN proxy_history h ON u.user_id = h.user_id
            GROUP BY u.user_id
            ORDER BY proxy_count DESC
            LIMIT 5
        """)
        active_users = c.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats[0]}</b>\n"
            f"üîë –í—ã–¥–∞–Ω–æ –ø—Ä–æ–∫—Å–∏: <b>{stats[1]}</b>\n"
            f"üì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: <b>{stats[2]}</b>\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats[3]}</b>\n\n"
            "<b>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:</b>\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        for day, count in daily_stats:
            response += f"‚Ä¢ {day}: <b>{count}</b> –≤—ã–¥–∞—á –ø—Ä–æ–∫—Å–∏\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø—Ä–æ–∫—Å–∏
        response += "\n<b>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:</b>\n"
        for proxy_type, count in top_proxies:
            response += f"‚Ä¢ {proxy_type}: <b>{count}</b> –≤—ã–¥–∞—á\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response += "\n<b>üë• –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        for user_id, first_name, username, count in active_users:
            username = f"@{username}" if username else "–±–µ–∑ username"
            response += f"‚Ä¢ <a href='tg://user?id={user_id}'>{first_name}</a> ({username}): <b>{count}</b> –ø—Ä–æ–∫—Å–∏\n"

        await message.answer(response, parse_mode='HTML', disable_web_page_preview=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_handler(message: types.Message):
    settings = get_user_settings(message.from_user.id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_lang")
        ],
        [
            InlineKeyboardButton(
                text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if settings['notifications'] else '–í—ã–∫–ª'}",
                callback_data="toggle_notify"
            )
        ]
    ])
    
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        f"üåê –Ø–∑—ã–∫: {settings['language'].upper()}\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if settings['notifications'] else '–í—ã–∫–ª—é—á–µ–Ω—ã'}",
        reply_markup=keyboard
    )

@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message, state: FSMContext):
    await message.answer(
        "üÜò <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)\n"
        "2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –Ω–∏–∂–µ.",
        reply_markup=get_support_menu()
    )
    await state.set_state(SupportStates.WAITING_MESSAGE)

@router.message(SupportStates.WAITING_MESSAGE, F.text == "‚úâÔ∏è –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def my_tickets_handler(message: types.Message, state: FSMContext):
    tickets = get_user_tickets(message.from_user.id)
    
    if not tickets:
        await message.answer("üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", reply_markup=get_support_menu())
        return
    
    tickets_text = "üì¨ <b>–í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b>\n\n"
    for ticket in tickets:
        status = "üü¢ –û—Ç–∫—Ä—ã—Ç" if ticket[8] == 'open' else "üî¥ –ó–∞–∫—Ä—ã—Ç"
        date_str = format_date(ticket[9])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        media_info = ""
        if ticket[6]:  # media_type
            media_icon = "üñºÔ∏è" if ticket[6] == "photo" else "üé•" if ticket[6] == "video" else "üìÑ"
            media_info = f"\n{media_icon} –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –≤ –æ—Ç–≤–µ—Ç–µ
        reply_media_info = ""
        if len(ticket) > 13 and ticket[13]:  # reply_media_type
            reply_media_icon = "üñºÔ∏è" if ticket[13] == "photo" else "üé•" if ticket[13] == "video" else "üìÑ"
            reply_media_info = f"\n{reply_media_icon} –í –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª"
        
        tickets_text += f"<b>#{ticket[0]}</b> - {status}{media_info}{reply_media_info}\n–î–∞—Ç–∞: {date_str}\n\n"
    
    await message.answer(tickets_text, reply_markup=get_support_menu())

@router.message(SupportStates.WAITING_MESSAGE, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_support_handler(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
    await state.clear()

async def process_support_message(message: types.Message, state: FSMContext):
    user = message.from_user
    media_type = None
    media_path = None
    ticket_text = ""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.text:
        ticket_text = message.text
    elif message.caption:
        ticket_text = message.caption
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    if message.photo:
        media = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        media_type, media_path = await save_media(media, message.from_user.id, message.bot)
    elif message.video:
        media_type, media_path = await save_media(message.video, message.from_user.id, message.bot)
    elif message.document:
        media_type, media_path = await save_media(message.document, message.from_user.id, message.bot)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    if media_type == "too_big":
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî 20 –ú–ë –¥–ª—è –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –º–µ–¥–∏–∞
    if not ticket_text and not media_type:
        await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
    ticket_id = create_support_ticket(
        user.id,
        user.username,
        user.first_name,
        user.last_name,
        ticket_text,
        media_type,
        media_path
    )
    
    if not ticket_id:
        await message.answer(
            f"‚ö†Ô∏è –£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º {MAX_TICKETS_PER_USER}).\n"
            "–ó–∞–∫—Ä–æ–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", 
                callback_data=f"reply_ticket_{ticket_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                url=f"tg://user?id={user.id}"
            )
        ]
    ])
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        if media_type and media_path and media_type != "too_big":
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–¥–∏–∞
            media_icon = "üñºÔ∏è" if media_type == "photo" else "üé•" if media_type == "video" else "üìÑ"
            caption = (
                f"üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
                f"üî¢ ID: <code>#{ticket_id}</code>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention_html()}\n"
                f"üÜî ID: <code>{user.id}</code>\n\n"
                f"{media_icon} <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª</b>\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{ticket_text}</code>"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if not os.path.exists(media_path):
                logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_path}")
                await message.bot.send_message(
                    ADMIN_CHAT_ID,
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n{caption}",
                    reply_markup=admin_kb,
                    parse_mode='HTML'
                )
                return

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è FSInputFile —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
                file = FSInputFile(media_path)
                if media_type == "photo":
                    await message.bot.send_photo(
                        ADMIN_CHAT_ID,
                        file,
                        caption=caption,
                        reply_markup=admin_kb,
                        parse_mode='HTML'
                    )
                elif media_type == "video":
                    await message.bot.send_video(
                        ADMIN_CHAT_ID,
                        file,
                        caption=caption,
                        reply_markup=admin_kb,
                        parse_mode='HTML'
                    )
                else:  # document
                    await message.bot.send_document(
                        ADMIN_CHAT_ID,
                        file,
                        caption=caption,
                        reply_markup=admin_kb,
                        parse_mode='HTML'
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
                await message.bot.send_message(
                    ADMIN_CHAT_ID,
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞</b>\n\n{caption}",
                    reply_markup=admin_kb,
                    parse_mode='HTML'
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.bot.send_message(
                ADMIN_CHAT_ID,
                f"üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
                f"üî¢ ID: <code>#{ticket_id}</code>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention_html()}\n"
                f"üÜî ID: <code>{user.id}</code>\n\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{ticket_text}</code>",
                reply_markup=admin_kb
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        await message.bot.send_message(
            ADMIN_CHAT_ID,
            f"üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!</b>\n\n"
            f"üî¢ ID: <code>#{ticket_id}</code>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.mention_html()}\n"
            f"üÜî ID: <code>{user.id}</code>\n\n"
            f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞!</b>\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{ticket_text}</code>",
            reply_markup=admin_kb
        )
    
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    media_info = "üñºÔ∏è –§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ" if media_type == "photo" else \
                 "üé• –í–∏–¥–µ–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ" if media_type == "video" else \
                 "üìÑ –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω" if media_type and media_type != "too_big" else ""
    
    await message.answer(
        f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ <b>#{ticket_id}</b> –ø—Ä–∏–Ω—è—Ç–æ! {media_info}\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´‚úâÔ∏è –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è¬ª",
        reply_markup=get_main_menu()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
@router.callback_query(F.data.startswith("reply_ticket_"))
async def reply_ticket_callback(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    ticket_id = callback.data.split("_")[2]
    ticket = get_ticket_info(ticket_id)
    
    if not ticket:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    if ticket[8] != 'open':  # status
        await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ç–µ
    await state.update_data(
        ticket_id=ticket_id, 
        user_id=ticket[1],
        reply_text=""
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
    message_text = (
        f"‚úçÔ∏è –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket_id} –æ—Ç {ticket[3]}\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n<code>{ticket[5]}</code>"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if ticket[6] and ticket[6] != "too_big":  # media_type
        media_icon = "üñºÔ∏è" if ticket[6] == "photo" else "üé•" if ticket[6] == "video" else "üìÑ"
        media_info = f"\n\n{media_icon} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª</b>"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        download_button = InlineKeyboardButton(
            text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
            callback_data=f"download_media_{ticket_id}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[download_button]])
        
        await callback.message.answer(
            message_text + media_info,
            reply_markup=keyboard
        )
    else:
        await callback.message.answer(
            message_text,
            reply_markup=ReplyKeyboardRemove()
        )
    
    # –ü—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç
    await callback.message.answer(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_admin_reply_menu()
    )
    await state.update_data(bot=bot)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(SupportStates.ADMIN_REPLY)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
@router.callback_query(F.data.startswith("download_media_"))
async def download_media_callback(callback: types.CallbackQuery):
    try:
        ticket_id = callback.data.split("_")[2]
        ticket = get_ticket_info(ticket_id)
        
        if not ticket or not ticket[7]:  # media_path
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
            return
        
        media_path = ticket[7]
        media_type = ticket[6] if len(ticket) > 6 else "document"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(media_path):
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {media_path}")
            await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!", show_alert=True)
            return
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è FSInputFile
            file = FSInputFile(media_path)
            caption = f"üìé –§–∞–π–ª –∏–∑ —Ç–∏–∫–µ—Ç–∞ #{ticket_id}"
            
            if media_type == "photo":
                await callback.bot.send_photo(
                    chat_id=callback.from_user.id,
                    photo=file,
                    caption=caption,
                    parse_mode='HTML'
                )
            elif media_type == "video":
                await callback.bot.send_video(
                    chat_id=callback.from_user.id,
                    video=file,
                    caption=caption,
                    parse_mode='HTML'
                )
            else:  # document
                await callback.bot.send_document(
                    chat_id=callback.from_user.id,
                    document=file,
                    caption=caption,
                    parse_mode='HTML'
                )
            
            await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à —á–∞—Ç!")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {media_path}: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", show_alert=True)
            
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ download_media_callback: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

async def send_final_reply(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ticket_id = data.get('ticket_id')
    ticket = get_ticket_info(ticket_id)
    
    if not ticket:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
        
    try:
        # Get values from ticket tuple by index
        # Assuming ticket tuple structure: (id, user_id, username, first_name, last_name, message_text, media_type, media_path, status, created_at)
        user_id = ticket[1]  # user_id is at index 1
        username = ticket[2]
        first_name = ticket[3]
        reply_text = data.get('reply_text', '')
        media_path = data.get('reply_media_path')
        media_type = data.get('reply_media_type')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        response = f"üì© <b>–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à —Ç–∏–∫–µ—Ç #{ticket_id}</b>\n\n{reply_text}"
        
        try:
            if media_path and os.path.exists(media_path):
                # Use FSInputFile which handles file operations internally
                try:
                    if media_type == 'photo':
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=FSInputFile(media_path),
                            caption=response,
                            parse_mode='HTML'
                        )
                    elif media_type == 'video':
                        await bot.send_video(
                            chat_id=user_id,
                            video=FSInputFile(media_path),
                            caption=response,
                            parse_mode='HTML'
                        )
                    elif media_type == 'document':
                        await bot.send_document(
                            chat_id=user_id,
                            document=FSInputFile(media_path),
                            caption=response,
                            parse_mode='HTML'
                        )
                except Exception as file_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {media_path}: {file_error}", exc_info=True)
                    # Fallback to text message if file sending fails
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"{response}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                        parse_mode='HTML'
                    )
                    raise  # Re-raise to trigger the outer exception handler
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=response,
                    parse_mode='HTML'
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
            update_ticket_status(ticket_id, 'closed')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.answer(
                f"‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} ({first_name})",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if media_path and os.path.exists(media_path):
                try:
                    os.remove(media_path)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞",
            reply_markup=ReplyKeyboardRemove()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(SupportStates.ADMIN_REPLY, F.text)
async def process_admin_reply(message: types.Message, state: FSMContext, bot: Bot = None):
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if bot is None:
        bot = data.get('bot')
        if bot is None:
            logging.error("Bot instance not found in state")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç":
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return
    
    if message.text == "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª":
        await message.answer(
            "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ –æ—Ç–≤–µ—Ç—É:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(SupportStates.ADMIN_MEDIA)
        return
    
    if message.text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        if not data.get('reply_text'):
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –±–æ—Ç–∞
        await send_final_reply(message, state, bot)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    await state.update_data(reply_text=message.text)
    
    await message.answer(
        f"üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n{message.text}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –æ—Ç–≤–µ—Ç—É\n"
        "2. üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç\n"
        "3. ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç",
        reply_markup=get_admin_reply_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(SupportStates.ADMIN_MEDIA)
async def process_admin_media(message: types.Message, state: FSMContext, bot: Bot = None):
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if bot is None:
        bot = data.get('bot')
        if bot is None:
            logging.error("Bot instance not found in state")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return
            
    reply_media_type = None
    reply_media_path = None
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
    if message.photo:
        media = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        reply_media_type, reply_media_path = await save_media(media, message.from_user.id, bot)
    elif message.video:
        reply_media_type, reply_media_path = await save_media(message.video, message.from_user.id, bot)
    elif message.document:
        reply_media_type, reply_media_path = await save_media(message.document, message.from_user.id, bot)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    if reply_media_type == "too_big":
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî 20 –ú–ë –¥–ª—è –≤–∏–¥–µ–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return
    
    media_icon = "üñºÔ∏è" if reply_media_type == "photo" else "üé•" if reply_media_type == "video" else "üìÑ"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    await state.update_data(
        reply_media_type=reply_media_type,
        reply_media_path=reply_media_path
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    keyboard = [
        [KeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç")]
    ]
    
    await message.answer(
        f"{media_icon} –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –æ—Ç–≤–µ—Ç—É!\n\n"
        f"üìù –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:\n{data.get('reply_text', '')}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=keyboard,
            resize_keyboard=True
        )
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    await state.update_data(bot=bot)
    await state.set_state(SupportStates.ADMIN_REPLY)

# ========== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ========== #
@router.message(Command("addproxies"))
async def cmd_addproxies(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", reply_markup=get_main_menu())
    
    try:
        if not message.reply_to_message or not message.reply_to_message.document:
            return await message.answer("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Ñ–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ (txt)")
        
        file = await message.bot.get_file(message.reply_to_message.document.file_id)
        file_name = message.reply_to_message.document.file_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not file_name.endswith('.txt'):
            return await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .txt", reply_markup=get_main_menu())
        
        file_path = os.path.join(PROXY_FOLDER, file_name)
        await message.bot.download_file(file.file_path, file_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        display_name = os.path.splitext(file_name)[0].capitalize()
        add_proxy_file(file_name, display_name)
        
        proxies = load_proxies(file_name)
        await message.answer(
            f"‚úÖ –§–∞–π–ª '{file_name}' –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏\n"
            f"–¢–∏–ø: {display_name}",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_menu())

@router.message(Command("tickets"))
async def list_tickets_handler(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", reply_markup=get_main_menu())
    
    tickets = get_open_tickets()
    
    if not tickets:
        return await message.answer("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")
    
    tickets_text = "üì¨ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n"
    for ticket in tickets:
        date_str = format_date(ticket[9])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
        media_info = ""
        if ticket[6] and ticket[6] != "too_big":  # media_type
            media_icon = "üñºÔ∏è" if ticket[6] == "photo" else "üé•" if ticket[6] == "video" else "üìÑ"
            media_info = f"\n{media_icon} –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª"
        
        tickets_text += (
            f"<b>#{ticket[0]}</b>{media_info}\n"
            f"üë§ {ticket[3]} (@{ticket[2]})\n"
            f"üÜî <code>{ticket[1]}</code>\n"
            f"üìÖ {date_str}\n\n"
        )
    
    await message.answer(tickets_text)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö ========== #
@router.callback_query(F.data == "change_lang")
async def change_lang_callback(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")
        ],
        [
            InlineKeyboardButton(text="üá¨üáß English", callback_data="set_lang_en")
        ]
    ])
    await callback.message.edit_text("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("set_lang_"))
async def set_lang_callback(callback: types.CallbackQuery):
    lang = callback.data.split("_")[-1]
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –ë–î
    text = "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π" if lang == "ru" else "‚úÖ Language changed to English"
    await callback.message.edit_text(text)

@router.callback_query(F.data == "toggle_notify")
async def toggle_notify_callback(callback: types.CallbackQuery):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ë–î
    await callback.message.edit_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@router.message(SupportStates.WAITING_MESSAGE, F.text)
async def support_text_handler(message: types.Message, state: FSMContext):
    await process_support_message(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@router.message(SupportStates.WAITING_MESSAGE, F.photo)
async def support_photo_handler(message: types.Message, state: FSMContext):
    await process_support_message(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@router.message(SupportStates.WAITING_MESSAGE, F.video)
async def support_video_handler(message: types.Message, state: FSMContext):
    await process_support_message(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@router.message(SupportStates.WAITING_MESSAGE, F.document)
async def support_document_handler(message: types.Message, state: FSMContext):
    await process_support_message(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
@router.message()
async def unknown_message_handler(message: types.Message):
    await message.answer("ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query()
async def unknown_callback_handler(callback: types.CallbackQuery):
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney
@router.message(F.text == "üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞")
async def support_bot_handler(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ÆMoney
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí≥ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —á–µ—Ä–µ–∑ –ÆMoney",
                url="https://yoomoney.ru/transfer"
            )
        ]
    ])
    
    await message.answer(
        "üíñ <b>–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞!</b>\n\n"
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ:\n"
        "‚Ä¢ –£–ª—É—á—à–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n"
        "<i>–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</i>\n\n"
        "<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n"
        "–ÆMoney: <code>4100 1182 5161 5761</code>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏
    dp.message.register(get_proxy_handler, Command("getproxy"))
    dp.message.register(get_proxy_handler, F.text == "üçî –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏")
    dp.callback_query.register(get_proxy_callback, F.data.startswith("getproxy_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    dp.message.register(download_file_handler, Command("download"))
    dp.message.register(download_file_handler, F.text == "üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
    dp.callback_query.register(download_file_callback, F.data.startswith("download_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    dp.message.register(show_statistics, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫
    dp.message.register(cmd_downloads, Command("downloads"))
    dp.message.register(cmd_my_downloads, Command("mydownloads"))
    dp.message.register(my_files_handler, F.text == "üìé –ú–æ–∏ —Ñ–∞–π–ª—ã")
    dp.message.register(history_handler, F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    dp.message.register(support_handler, F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    dp.message.register(support_handler, Command("support"))
    dp.message.register(my_tickets_handler, Command("mytickets"))
    dp.message.register(cancel_support_handler, Command("cancel"), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.callback_query.register(reply_ticket_callback, F.data.startswith("reply_ticket_"))
    dp.callback_query.register(download_media_callback, F.data.startswith("download_media_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    dp.message.register(process_support_message, SupportStates.WAITING_MESSAGE)
    dp.message.register(process_admin_reply, SupportStates.ADMIN_REPLY)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    dp.message.register(support_photo_handler, SupportStates.WAITING_MESSAGE, F.photo)
    dp.message.register(support_video_handler, SupportStates.WAITING_MESSAGE, F.video)
    dp.message.register(support_document_handler, SupportStates.WAITING_MESSAGE, F.document)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.message.register(process_admin_media, SupportStates.ADMIN_MEDIA, F.photo | F.video | F.document)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    dp.message.register(settings_handler, Command("settings"))
    dp.message.register(settings_handler, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    dp.callback_query.register(change_lang_callback, F.data == "change_lang")
    dp.callback_query.register(set_lang_callback, F.data.startswith("set_lang_"))
    dp.callback_query.register(toggle_notify_callback, F.data == "toggle_notify")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã
    dp.callback_query.register(get_file_link_callback, F.data.startswith("link_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞
    dp.message.register(support_bot_handler, F.text == "üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
    dp.message.register(unknown_message_handler)
    dp.callback_query.register(unknown_callback_handler)